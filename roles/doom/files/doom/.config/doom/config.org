#+TITLE: DOOM Emacs Config
#+AUTHOR: Jonas Schwind
#+DESCRIPTION: My Doom Emacs config
#+STARTUP: showeverything
#+PROPERTIES: header-args :tangle config.el
#+OPTIONS: toc:t
#+auto_tangle: t

* Table of Contents :toc:
- [[#about-this-file][About this file]]
- [[#whatever-that-is][Whatever that is]]
- [[#autosave][Autosave]]
- [[#beacon][Beacon]]
- [[#bookmarks-and-buffers][Bookmarks and Buffers]]
  - [[#bookmarks][Bookmarks]]
  - [[#buffers][Buffers]]
  - [[#global-auto-revert][Global Auto Revert]]
  - [[#keybindings-within-ibuffer-mode][Keybindings within ibuffer mode]]
- [[#centaur-tabs][Centaur-Tabs]]
- [[#dashboard][Dashboard]]
  - [[#splash][Splash]]
  - [[#menu][Menu]]
- [[#doom-theme][DOOM Theme]]
- [[#editor][Editor]]
  - [[#autoformat][Autoformat]]
  - [[#indentation][Indentation]]
  - [[#scrolloff][Scrolloff]]
- [[#elfeed][Elfeed]]
- [[#fonts][Fonts]]
  - [[#font-scale][Font scale]]
- [[#identification][Identification]]
- [[#line-settings][Line Settings]]
- [[#lsp][LSP]]
  - [[#bindings][Bindings]]
  - [[#java][Java]]
- [[#minimap][Minimap]]
- [[#modeline][Modeline]]
- [[#org-mode][Org-Mode]]
  - [[#org-fonts][Org Fonts]]
  - [[#org-agenda][Org Agenda]]
  - [[#org-auto-tangle][Org auto-tangle]]
  - [[#org-roam][Org-Roam]]
  - [[#org-roam-ui][Org-Roam-UI]]
- [[#rainbow-mode][Rainbow Mode]]
- [[#shells][Shells]]

* About this file

Place your private configuration here! Remember, you do not need to =doom sync= or =SCP h r r= after modifying this file!

Whenever you reconfigure a package, make sure to wrap your config in an =after!= block, otherwise Doom's defaults may override your settings. E.g.

#+begin_example emacs-lisp
(after! PACKAGE
    (setq x y))
#+end_example

The exceptions to this rule:

- Setting file/directory variables (like =org-directory=)
- Setting variables which explicitly tell you to set them before their package is loaded (see =C-h v VARIABLE= to look up their documentation).
- Setting doom variables (which start with =doom-= or =+=).

Here are some additional functions/macros that will help you configure Doom.

- =load!= for loading external *.el files relative to this one
- =use-package!= for configuring packages
- =after!= for running code after a package has loaded
- =add-load-path!= for adding directories to the =load-path=, relative to this file. Emacs searches the =load-path= when you load packages with =require= or =use-package=.
- =map!= for binding new keys

To get information about any of these functions/macros, move the cursor over the highlighted symbol at press =K= (non-evil users must press =C-c c k=).
This will open documentation for it, including demos of how they are used.
Alternatively, use =C-h o= to look up a symbol (functions, variables, faces, etc).

You can also try =gd= (or =C-c c d=) to jump to their definition and see how they are implemented.

* Whatever that is
I don't know if this was important beacuse it was commented out by default, ill keep this here just in case

 #+begin_src emacs-lisp :tangle yes
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

* Autosave
Never ever loose files again

#+begin_src emacs-lisp :tangle yes
(setq auto-save-default t make-backup-files t)
#+end_src

* Beacon
Cursorflash on every big movement, never lose the cursor again.

#+begin_src emacs-lisp :tangle yes
(beacon-mode t)
#+end_src

* Bookmarks and Buffers
Doom Emacs uses =SPC b= for keybindings related to bookmarks and buffers.

** Bookmarks
Bookmarks are somewhat like registers in that they record positions you can jump to.
Unlike registers, they have long names, and they persist automatically from one Emacs session to the next.
The prototypical use of bookmarks is to record where you were reading in various files.

| COMMAND         | DESCRIPTION                            | KEYBINDING |
|-----------------+----------------------------------------+------------|
| list-bookmarks  | /List bookmarks/                         | SPC b L    |
| bookmark-set    | /Set bookmark/                           | SPC b m    |
| bookmark-delete | /Delete bookmark/                        | SPC b M    |
| bookmark-save   | /Save current bookmark to bookmark file/ | SPC b w    |

#+begin_src emacs-lisp :tangle yes
(setq bookmark-default-file "~/.config/doom/bookmarks")

(map! :leader
      (:prefix ("b". "buffer")
       :desc "List bookmarks"                          "L" #'list-bookmarks
       :desc "Set bookmark"                            "m" #'bookmark-set
       :desc "Delete bookmark"                         "M" #'bookmark-set
       :desc "Save current bookmarks to bookmark file" "w" #'bookmark-save))
#+end_src

** Buffers
Regarding /buffers/, the text you are editing in Emacs resides in an object called a /buffer/.
Each time you visit a file, a buffer is used to hold the file’s text.
Each time you invoke Dired, a buffer is used to hold the directory listing.
/Ibuffer/ is a program that lists all of your Emacs /buffers/, allowing you to navigate between them and filter them.

| COMMAND         | DESCRIPTION          | KEYBINDING |
|-----------------+----------------------+------------|
| ibuffer         | /Launch ibuffer/       | SPC b i    |
| kill-buffer     | /Kill current buffer/  | SPC b k    |
| next-buffer     | /Goto next buffer/     | SPC b n    |
| previous-buffer | /Goto previous buffer/ | SPC b p    |
| save-buffer     | /Save current buffer/  | SPC b s    |

** Global Auto Revert
A buffer can get out of sync with respect to its visited file on disk if that file is changed by another program.
To keep it up to date, you can enable Auto Revert mode by typing =M-x auto-revert-mode=, or you can set it to be turned on globally with =global-auto-revert-mode=.
I have also turned on Global Auto Revert on non-file buffers, which is especially useful for 'dired' buffers.

#+begin_src emacs-lisp :tangle yes
(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers t)
#+end_src

** Keybindings within ibuffer mode
| COMMAND                           | DESCRIPTION                            | KEYBINDING |
|-----------------------------------+----------------------------------------+------------|
| ibuffer-mark-forward              | /Mark the buffer/                        | m          |
| ibuffer-unmark-forward            | /Unmark the buffer/                      | u          |
| ibuffer-do-kill-on-deletion-marks | /Kill the marked buffers/                | x          |
| ibuffer-filter-by-content         | /Ibuffer filter by content/              | f c        |
| ibuffer-filter-by-directory       | /Ibuffer filter by directory/            | f d        |
| ibuffer-filter-by-filename        | /Ibuffer filter by filename (full path)/ | f f        |
| ibuffer-filter-by-mode            | /Ibuffer filter by mode/                 | f m        |
| ibuffer-filter-by-name            | /Ibuffer filter by name/                 | f n        |
| ibuffer-filter-disable            | /Disable ibuffer filter/                 | f x        |
| ibuffer-do-kill-lines             | /Hide marked buffers/                    | g h        |
| ibuffer-update                    | /Restore hidden buffers/                 | g H        |

#+begin_src emacs-lisp
(evil-define-key 'normal ibuffer-mode-map
  (kbd "f c") 'ibuffer-filter-by-content
  (kbd "f d") 'ibuffer-filter-by-directory
  (kbd "f f") 'ibuffer-filter-by-filename
  (kbd "f m") 'ibuffer-filter-by-mode
  (kbd "f n") 'ibuffer-filter-by-name
  (kbd "f x") 'ibuffer-filter-disable
  (kbd "g h") 'ibuffer-do-kill-lines
  (kbd "g H") 'ibuffer-update)
#+end_src

* Centaur-Tabs
| COMMAND                     | DESCRIPTION               | KEYBINDING       |
|-----------------------------+---------------------------+------------------|
| centaur-tabs-mode           | /Toggle tabs globally/      | SPC t c          |
| centaur-tabs-local-mode     | /Toggle tabs local display/ | SPC t C          |
| centaur-tabs-forward        | /Next tab/                  | g <right> or g t |
| centaur-tabs-backward       | /Previous tab/              | g <left> or g T  |
| centaur-tabs-forward-group  | /Next tab group/            | g <down>         |
| centaur-tabs-backward-group | /Previous tab group/        | g <up>           |

#+begin_src emacs-lisp :tangle yes
(defun exclude-centaur-tabs-from-buffer (buffer)
  "Returns non-nil if BUFFER should be excluded from Centaur Tabs."
  (or (string-prefix-p "*" (buffer-name buffer))
      (string= (buffer-name buffer) "*doom*")
      (string= (buffer-name buffer) "*scratch*")
      (string= (buffer-name buffer) "*Messages*")
      (string-prefix-p "*Treemacs-scoped-Buffer-Perspective" (buffer-name buffer))))

(defun hide-centaur-tabs-in-buffer  (buffer)
  "Returns non-nil if BUFFER should be excluded from Centaur Tabs."
  (or (string-prefix-p "*" (buffer-name buffer))
      (string= (buffer-name buffer) "*doom*")
      (string= (buffer-name buffer) "*scratch*")
      (string= (buffer-name buffer) "*Messages*")
      (with-current-buffer buffer
        (derived-mode-p 'treemacs-mode))))

(setq centaur-tabs-set-bar 'over
      centaur-tabs-set-icons t
      centaur-tabs-gray-out-icons 'buffer
      centaur-tabs-height 24
      centaur-tabs-set-modified-marker t
      centaur-tabs-style "bar"
      centaur-tabs-modified-marker "•"
      centaur-tabs-hide-tab-function #'exclude-centaur-tabs-from-buffer
      centaur-tabs-hide-tab-function #'hide-centaur-tabs-in-buffer)

(map! :leader
      :desc "Toggle tabs globally" "t TAB" #'centaur-tabs-mode
      :desc "Toggle tabs local display" "t <backtab>" #'centaur-tabs-local-mode)

(evil-define-key 'normal centaur-tabs-mode-map (kbd "g <right>") 'centaur-tabs-forward        ; default Doom binding is 'g t'
                                               (kbd "g <left>")  'centaur-tabs-backward       ; default Doom binding is 'g T'
                                               (kbd "g <down>")  'centaur-tabs-forward-group
                                               (kbd "g <up>")    'centaur-tabs-backward-group)
#+END_SRC

* Dashboard
** Splash
Replacing the default splsh with something more personal

*** Image
Set an custom Slash image

#+begin_src emacs-lisp :tangle yes
(setq fancy-splash-image (concat doom-private-dir "splash/hlb-splash.png"))
#+end_src

*** Ascii
Set asciiart as fallback

#+begin_src emacs-lisp :tangle yes
(defun dashboard-ascii ()
  (let* ((banner '("                                                                     .                "
                   "         .:  :                                                      :.               ."
                   "..-:.   ..  .::..                                                ..=......:    .-::.. "
                   "   ..::--::::-::===-====--.                             .:=---===+=-:--=-::::-:.      "
                   "   :.     .:-. ....: :**+.                               .=++. : ..    ..:.           "
                   "       .    .    .-:=-*++     -*+=.             .*++:    .*++::-..  ..                "
                   "   . .:-:. .=  ... :. ===     .++:    .=+++-.    =+=.     +==-=:::::....              "
                   "          ..:.::.=...:+==     :+=:      ++=      ===.     === +...       ..  .        "
                   "               -:..=+.===     :+=-      +==      ==+.    .+==  .-. :.........:        "
                   "       .:..::.::  ::: ==+     :=+:      ++=      -==.     +==-:-  =:.                 "
                   "     ..   .    ..:..  ==+     :++-      +=-      -==.    .+=+..-=- ...:=::.           "
                   "             :.....:= ==+     :+=-      +==      ===.    .+=+   -::-.  ..             "
                   "         ......=-.:-::===     :==-      ++=      =++.    .+++:=+-.....                "
                   "             ..   :   +++     :++-      ++=      =+*.     +==   ::-.....              "
                   "                 .:   *++     :**-    .=***:     =+*.     ***=-+:::..                 "
                   "           :::... =:=-+**     :*+        .  .    .+*.    .**=- .=.                    "
                   "               .::::. -*#     :+                   *     .##:.  -::                   "
                   "             .:.  .=::+*#     ..                   :     -##=   . ...                 "
                   "                 .:.  -*#:                               =#= -.-.                     "
                   "                     -  #=                               **: .                        "
                   "                        :*                              .* .-.                        "
                   "                       .::=                             =::   .                       "
                   "                        .--:                           .-.                            "
                   "                           -                          .- .                            "
                   "                            --.                     .:..                              "
                   "                              ..                   ..                                 "))
         (longest-line (apply #'max (mapcar #'length banner))))
    (put-text-property
     (point)
     (dolist (line banner (point))
       (insert (+doom-dashboard--center
                +doom-dashboard--width
                (concat line (make-string (max 0 (- longest-line (length line))) 32)))
               "\n"))
     'face 'doom-dashboard-banner)))

(setq +doom-dashboard-ascii-banner-fn #'dashboard-ascii)
#+end_src

** Menu

#+begin_src emacs-lisp :tangle yes
(add-to-list '+doom-dashboard-menu-sections
             '("Open RSS feed"
               :icon (nerd-icons-faicon "nf-fa-rss" :face 'doom-dashboard-menu-title)
               :when (featurep! :app rss +org)
               :face (:inherit (doom-dashboard-menu-title bold))
               :action elfeed))
#+end_src

* DOOM Theme
There are two ways to load a theme. Both assume the theme is installed and available. You can either set =doom-theme= or manually load a theme with the =load-theme= function.
To try out new themes: =M-x load-theme= or =SPC h t=.

#+begin_src emacs-lisp :tangle yes
(setq doom-theme 'doom-dracula
      xterm-color-preserve-properties t)
#+end_src

#+begin_src emacs-lisp :tangle no
(map! :leader
      :desc "Load new theme" "t t" #'load-theme)
#+end_src

* Editor
** Autoformat
Be gone

#+begin_src emacs-lisp :tangle yes
(setq-hook! 'prog-mode-hook +format-with nil)
(setq +format-on-save-enabled-modes nil)
#+end_src

** Indentation
I like 8 character tabs, it a callback to the old typewriter days.

#+begin_src emacs-lisp :tangle yes
(setq-default indent-tabs-mode nil
              tab-width 8)
(setq indent-line-function 'insert-tab)
#+end_src

** Scrolloff

#+begin_src emacs-lisp :tangle yes
(setq scroll-margin 8)
#+end_src

* Elfeed
An RSS reader in emacs

#+begin_src emacs-lisp :tangle yes
(require 'elfeed-goodies)
(elfeed-goodies/setup)
(setq elfeed-goodies/entry-pane-size 0.5)

(add-hook 'elfeed-search-mode-hook #'elfeed-update)

(evil-define-key 'normal elfeed-show-mode-map
  (kbd "J") 'elfeed-goodies/split-show-next
  (kbd "K") 'elfeed-goodies/split-show-prev)
(evil-define-key 'normal elfeed-search-mode-map
  (kbd "J") 'elfeed-goodies/split-show-next
  (kbd "K") 'elfeed-goodies/split-show-prev)

(map! :leader :desc "elfeed" "o n" #'elfeed)
#+end_src

* Fonts
Doom exposes five (optional) variables for controlling fonts in Doom:
+ =doom-font= -- the primary font to use
+ =doom-variable-pitch-font= -- a non-monospace font (where applicable)
+ =doom-big-font= -- used for =doom-big-font-mode=; use this for presentations or streaming.
+ =doom-unicode-font= -- for unicode glyphs
+ =doom-serif-font= -- for the =fixed-pitch-serif= face

See =C-h v doom-font= for documentation and more examples of what they accept.

#+begin_src emacs-lisp :tangle yes
(setq doom-font (font-spec :family "JetBrains Mono" :size 9.0 :weight 'normal :slant 'normal :height 1.0)
      doom-variable-pitch-font (font-spec :family "Ubuntu" :height 1.3)
      doom-big-font (font-spec :family "JetBrains Mono" :size 24.0)
      doom-unicode-font (font-spec :family "FiraCode Nerd Font Mono" :size 11))

(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))

(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src

If you or Emacs can't find your font, use =M-x describe-font= to look them up, =M-x eval-region= to execute elisp code, and =M-x doom/reload-font= to refresh your font settings.
If Emacs still can't find your font, it likely wasn't installed correctly. Font issues are rarely Doom issues!

** Font scale
Remaped the resizekeys to a more sane buttons

#+begin_src emacs-lisp :tangle yes
(map!
 :n "C-=" #'doom/reset-font-size
 :n "C-+" #'text-scale-increase
 :n "C--" #'text-scale-decrease)
#+end_src

* Identification
Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets.

#+begin_src emacs-lisp :tangle yes
(setq user-full-name "Jonas Schwind"
      user-mail-address "jonasschwind20021@gmx.de")
#+end_src

* Line Settings
This determines the style of line numbers in effect.
If set to =nil=, line numbers are disabled. For relative line numbers, set this to =relative=.

#+begin_src emacs-lisp :tangle yes
(setq display-line-numbers-type 'relative)
#+end_src

Automaticaly wrap lengthy lines.

#+begin_src emacs-lisp :tangle yes
(+global-word-wrap-mode +1)
#+end_src

* LSP

** Bindings
Setup lsp bindings to reseble my nvim bindigs

#+begin_src emacs-lisp :tangle yes
(map! :leader
      :desc "Rename symbol" "r n" #'lsp-rename
      :desc "Execute code action" "c a" #'lsp-execute-code-action
      :desc "Search workspace symbols" "v w s" #'lsp-ivy-workspace-symbol
      :desc "Find references" "v d" #'lsp-ui-peek-find-references
      :desc "Execute code action" "v c a" #'lsp-execute-code-action
      :desc "Find references" "v r r" #'lsp-find-references
      :desc "Rename symbol" "v r n" #'lsp-rename)

(map! :map lsp-mode-map
      :desc "Show documentation" "K" #'lsp-hover
      :desc "Go to definition" "g d" #'lsp-find-definition
      :desc "Jump to next diagnostic" "[ d" #'lsp-ui-peek-jump-forward
      :desc "Jump to previous diagnostic" "] d" #'lsp-ui-peek-jump-backward)

(after! company
  (map! :map company-active-map
        :desc "Select previous candidate" "C-p" #'company-select-previous
        :desc "Select next candidate" "C-n" #'company-select-next
        :desc "Complete selection" "C-y" #'company-complete-selection
        :desc "Complete" "C-SPC" #'company-complete))
#+end_src


** Java
Fix issues with lombok

#+begin_src emacs-lisp :tangle yes
(after! lsp-java
  (setq lombok-library-path (concat doom-data-dir "lombok.jar"))
  (unless (file-exists-p lombok-library-path)
    (url-copy-file "https://projectlombok.org/downloads/lombok.jar" lombok-library-path))
  (setq lsp-java-vmargs '("-XX:+UseParallelGC" "-XX:GCTimeRatio=4" "-XX:AdaptiveSizePolicyWeight=90" "-Dsun.zip.disableMemoryMapping=true" "-Xmx4G" "-Xms100m"))
  (push (concat "-javaagent:" (expand-file-name lombok-library-path)) lsp-java-vmargs))
#+end_src

* Minimap
#+begin_src emacs-lisp :tangle yes
(setq minimap-window-location 'right)
(map! :leader
      (:prefix ("t" . "toggle")
       :desc "Toggle minimap-mode" "m" #'minimap-mode))
#+end_src emacs-lisp

* Modeline
The modeline is the bottom status bar that appears in Emacs windows.  For more information on what is available to configure in the Doom modeline, check out:
https://github.com/seagle0128/doom-modeline

#+begin_src emacs-lisp :tangle yes
(set-face-attribute 'mode-line nil :font "Ubuntu-10")
(setq doom-modeline-height 25     ;; sets modeline height
      doom-modeline-bar-width 5   ;; sets right bar width
      doom-modeline-persp-name t  ;; adds perspective name to modeline
      doom-modeline-persp-icon t) ;; adds folder icon next to persp name
#+end_src

* Org-Mode
If you use =org= and don't want your org files in the default location below, change =org-directory=.
It must be set before org loads!

#+begin_src emacs-lisp :tangle yes
(map! :leader :desc "Org babel tangle" "m B" #'org-babel-tangle)
(after! org
  (setq org-directory "~/Documents/org/"
        org-roam-directory "~/Documents/org/roam/"
        org-hide-emphasis-markers t
        org-ellipsis " ▼ "
        org-superstar-headline-bullets-list '("◉" "●" "○" "◆" "●" "○" "◆")
        org-superstar-itembullet-alist '((?+ . ?➤) (?- . ?✦)) ; changes +/- symbols in item lists
        org-log-done 'time
        org-src-fontify-natively t
        org-src-tab-acts-natively t))
#+end_src

** Org Fonts
Set mixed pitch font for =org-mode= buffers

#+begin_src emacs-lisp :tangle yes
(custom-set-faces
  '(org-document-title ((t (:inherit outline-1 :height 1.6))))
  '(org-document-info ((t (:inherit outline-1 :height 1.6))))
  '(org-document-info-keyword ((t (:inherit outline-1 :height 1.6))))
  '(org-level-1 ((t (:inherit outline-1 :height 1.8))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.7))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.6))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.5))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.4))))
  '(org-level-6 ((t (:inherit outline-5 :height 1.3))))
  '(org-level-7 ((t (:inherit outline-5 :height 1.2))))
  '(org-level-8 ((t (:inherit outline-5 :height 1.1)))))
#+end_src

** Org Agenda

#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-agenda-files '("~/Documents/org/agenda.org"))
  (setq
   org-fancy-priorities-list '("🟥" "🟧" "🟨")
   org-priority-faces
   '((?A :weight bold)
     (?B :weight bold)
     (?C :weight bold))
   org-agenda-block-separator 8411)

  (setq org-agenda-custom-commands
        '(("v" "A better agenda view"
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority unfinished tasks:")))
            (tags "PRIORITY=\"B\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "Medium-priority unfinished tasks:")))
            (tags "PRIORITY=\"C\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Low-priority unfinished tasks:")))
            (tags "customtag"
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Tasks marked with customtag:")))
            (agenda "")
            (alltodo ""))))))
#+end_src

** Org auto-tangle
=org-auto-tangle= allows you to automatically tangle when you save the document. Add the option =#+auto_tangle: t= in your Org file.

#+begin_src emacs-lisp :tangle yes
(use-package org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config (setq org-auto-tangle-default t))
#+end_src

** Org-Roam

#+begin_src emacs-lisp :tangle yes
(use-package! org-roam
  :defer t
  :config (setq org-roam-capture-templates
        '(("m" "main" plain
           "%?"
           :if-new (file+head "main/${slug}.org" "#+title: ${title}\n")
        :immediate-finish t
           :unarrowed t)
          ("r" "reference" plain
           "%?"
           :if-new (file+head "reference/${slug}.org" "#+title: ${title}\n")
           :immediate-finish t
           :unarrowed t)
          ("a" "article" plain
           "%?"
           :if-new (file+head "article/${slug}.org" "#+title: ${title}\n")
           :immediate-finish t
           :unarrowed t)))

        (cl-defmethod org-roam-node-type ((node org-roam-node))
          "Return node-type"
          (condition-case nil
              (file-name-nondirectory
               (directory-file-name
                (file-name-directory
                 (file-relative-name (org-roam-node-file node) org-roam-directory))))
          (error "")))

        (setq org-roam-node-display-template (concat "${type:15} ${title:*} " (propertize "${tags:10}" 'face 'org-tag))))

(map! :leader
      (:prefix ("n r" . "org-roam")
               :desc "Toggle roam-buffer"       "r" #'org-roam-buffer-toggle
               :desc "Find Node"                "f" #'org-roam-node-find
               :desc "Insert Node"              "i" #'org-roam-node-insert
               :desc "Show Graph"               "g" #'org-roam-graph
               :desc "Capture to Node"          "c" #'org-roam-capture
               :desc "Capture Dailies"          "j" #'org-roam-dailies-capture-today))
#+end_src

** Org-Roam-UI

#+begin_src emacs-lisp :tangle yes
(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam
  :init (when (featurep 'xwidget-internal)
          (setq org-roam-ui-browser-function #'xwidget-webkit-browse-url))
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+end_src

* Rainbow Mode
Rainbow mode displays the actual color for any hex value color, regardless of what mode I am in.
The following creates a global minor mode for rainbow-mode and enables it.

#+begin_src emacs-lisp :tangle yes
(use-package rainbow-mode :hook (prog-mode . rainbow-mode ))
#+end_src

* Shells
Settings for the various shells and terminal emulators within Emacs.

| COMMAND             | DESCRIPTION                | KEYBINDING |
|---------------------+----------------------------+------------|
| eshell              | /Launch the eshell/          | SPC e s    |
| +eshell/toggle      | /Toggle eshell popup window/ | SPC e t    |
| counsel-esh-history | /Browse the eshell history/  | SPC e h    |
| +vterm/toggle       | /Toggle vterm popup window/  | SPC v t    |

#+begin_src emacs-lisp :tangle yes
(setq shell-file-name "/bin/zsh"
      vterm-max-scrollback 5000)
(setq eshell-rc-script "~/.config/doom/eshell/profile"
      eshell-aliases-file "~/.config/doom/eshell/aliases"
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands'("bash" "htop" "ssh" "top" "zsh"))
(map! :leader
      :desc "Eshell"                 "e s" #'eshell
      :desc "Eshell popup toggle"    "e t" #'+eshell/toggle
      :desc "Counsel eshell history" "e h" #'counsel-esh-history
      :desc "Vterm popup toggle"     "v t" #'+vterm/toggle)
#+END_SRC
