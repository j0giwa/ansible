#+TITLE: DOOM Emacs Config
#+AUTHOR: Jonas Schwind
#+DESCRIPTION: My Doom Emacs config
#+STARTUP: showeverything
#+PROPERTIES: header-args :tangle config.el
#+OPTIONS: toc:t
#+auto_tangle: t

* Table of Contents :toc:
- [[#about-this-config][About this config]]
- [[#autosave][Autosave]]
- [[#beacon][Beacon]]
- [[#boolmarks-and-buffers][Boolmarks and Buffers]]
  - [[#bookmarks][Bookmarks]]
  - [[#buffers][Buffers]]
  - [[#global-auto-revert][Global Auto Revert]]
  - [[#keybindings-within-ibuffer-mode][Keybindings within ibuffer mode]]
- [[#dashboard][Dashboard]]
  - [[#splash][Splash]]
- [[#doom-theme][DOOM Theme]]
- [[#editing][Editing]]
- [[#fonts][Fonts]]
- [[#identification][Identification]]
- [[#line-settings][Line Settings]]
- [[#markdown][Markdown]]
- [[#minimap][Minimap]]
- [[#modeline][Modeline]]
- [[#org-mode][Org-Mode]]
  - [[#org-fonts][Org Fonts]]
  - [[#org-agenda][Org Agenda]]
  - [[#org-auto-tangle][Org auto-tangle]]
  - [[#org-roam][Org-Roam]]
  - [[#org-roam-ui][Org-Roam-UI]]
  - [[#org-ai][Org-AI]]
- [[#rainbow-mode][Rainbow Mode]]
- [[#shells][Shells]]
- [[#winner-mode][Winner Mode]]
- [[#whitespace-mode][Whitespace-mode]]

* About this config
This is my private configuration.
It is supposed to be used in DOOM Emacs
Remember, you do not need to run 'doom sync' after modifying this file!

#+begin_src emacs-lisp :tangle yes
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

* Autosave

#+begin_src emacs-lisp :tangle yes
(setq auto-save-default t make-backup-files t)
#+end_src

* Beacon
Cursorflash on every big movement, never lose the cursor again.

#+begin_src emacs-lisp :tangle yes
(beacon-mode t)
#+end_src

* Boolmarks and Buffers
Doom Emacs uses =SPC b= for keybindings related to bookmarks and buffers.

** Bookmarks
Bookmarks are somewhat like registers in that they record positions you can jump to.
Unlike registers, they have long names, and they persist automatically from one Emacs session to the next.
The prototypical use of bookmarks is to record where you were reading in various files.

| COMMAND         | DESCRIPTION                            | KEYBINDING |
|-----------------+----------------------------------------+------------|
| list-bookmarks  | /List bookmarks/                         | SPC b L    |
| bookmark-set    | /Set bookmark/                           | SPC b m    |
| bookmark-delete | /Delete bookmark/                        | SPC b M    |
| bookmark-save   | /Save current bookmark to bookmark file/ | SPC b w    |

#+BEGIN_SRC emacs-lisp tangle: yes
(setq bookmark-default-file "~/.config/doom/bookmarks")

(map! :leader
      (:prefix ("b". "buffer")
       :desc "List bookmarks"                          "L" #'list-bookmarks
       :desc "Set bookmark"                            "m" #'bookmark-set
       :desc "Delete bookmark"                         "M" #'bookmark-set
       :desc "Save current bookmarks to bookmark file" "w" #'bookmark-save))
#+END_SRC

** Buffers
Regarding /buffers/, the text you are editing in Emacs resides in an object called a /buffer/.
Each time you visit a file, a buffer is used to hold the file’s text.
Each time you invoke Dired, a buffer is used to hold the directory listing.
/Ibuffer/ is a program that lists all of your Emacs /buffers/, allowing you to navigate between them and filter them.

| COMMAND         | DESCRIPTION          | KEYBINDING |
|-----------------+----------------------+------------|
| ibuffer         | /Launch ibuffer/       | SPC b i    |
| kill-buffer     | /Kill current buffer/  | SPC b k    |
| next-buffer     | /Goto next buffer/     | SPC b n    |
| previous-buffer | /Goto previous buffer/ | SPC b p    |
| save-buffer     | /Save current buffer/  | SPC b s    |

** Global Auto Revert
A buffer can get out of sync with respect to its visited file on disk if that file is changed by another program.
To keep it up to date, you can enable Auto Revert mode by typing M-x auto-revert-mode, or you can set it to be turned on globally with 'global-auto-revert-mode'.
I have also turned on Global Auto Revert on non-file buffers, which is especially useful for 'dired' buffers.

#+BEGIN_SRC emacs-lisp tangle: yes
(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers t)
#+end_src

** Keybindings within ibuffer mode
| COMMAND                           | DESCRIPTION                            | KEYBINDING |
|-----------------------------------+----------------------------------------+------------|
| ibuffer-mark-forward              | /Mark the buffer/                        | m          |
| ibuffer-unmark-forward            | /Unmark the buffer/                      | u          |
| ibuffer-do-kill-on-deletion-marks | /Kill the marked buffers/                | x          |
| ibuffer-filter-by-content         | /Ibuffer filter by content/              | f c        |
| ibuffer-filter-by-directory       | /Ibuffer filter by directory/            | f d        |
| ibuffer-filter-by-filename        | /Ibuffer filter by filename (full path)/ | f f        |
| ibuffer-filter-by-mode            | /Ibuffer filter by mode/                 | f m        |
| ibuffer-filter-by-name            | /Ibuffer filter by name/                 | f n        |
| ibuffer-filter-disable            | /Disable ibuffer filter/                 | f x        |
| ibuffer-do-kill-lines             | /Hide marked buffers/                    | g h        |
| ibuffer-update                    | /Restore hidden buffers/                 | g H        |

#+BEGIN_SRC emacs-lisp tangle: yes
(evil-define-key 'normal ibuffer-mode-map
  (kbd "f c") 'ibuffer-filter-by-content
  (kbd "f d") 'ibuffer-filter-by-directory
  (kbd "f f") 'ibuffer-filter-by-filename
  (kbd "f m") 'ibuffer-filter-by-mode
  (kbd "f n") 'ibuffer-filter-by-name
  (kbd "f x") 'ibuffer-filter-disable
  (kbd "g h") 'ibuffer-do-kill-lines
  (kbd "g H") 'ibuffer-update)
#+end_src

* Dashboard
** Splash

Set an custom Slash image
#+begin_src emacs-lisp :tangle yes
(setq fancy-splash-image "~/.config/doom/hlb-splash.png")
#+end_src

Set asciiart as fallback
#+begin_src emacs-lisp :tangle yes
(defun dashboard-ascii ()
  (let* ((banner '("                                                                     .                "
                   "         .:  :                                                      :.               ."
                   "..-:.   ..  .::..                                                ..=......:    .-::.. "
                   "   ..::--::::-::===-====--.                             .:=---===+=-:--=-::::-:.      "
                   "   :.     .:-. ....: :**+.                               .=++. : ..    ..:.           "
                   "       .    .    .-:=-*++     -*+=.             .*++:    .*++::-..  ..                "
                   "   . .:-:. .=  ... :. ===     .++:    .=+++-.    =+=.     +==-=:::::....              "
                   "          ..:.::.=...:+==     :+=:      ++=      ===.     === +...       ..  .        "
                   "               -:..=+.===     :+=-      +==      ==+.    .+==  .-. :.........:        "
                   "       .:..::.::  ::: ==+     :=+:      ++=      -==.     +==-:-  =:.                 "
                   "     ..   .    ..:..  ==+     :++-      +=-      -==.    .+=+..-=- ...:=::.           "
                   "             :.....:= ==+     :+=-      +==      ===.    .+=+   -::-.  ..             "
                   "         ......=-.:-::===     :==-      ++=      =++.    .+++:=+-.....                "
                   "             ..   :   +++     :++-      ++=      =+*.     +==   ::-.....              "
                   "                 .:   *++     :**-    .=***:     =+*.     ***=-+:::..                 "
                   "           :::... =:=-+**     :*+        .  .    .+*.    .**=- .=.                    "
                   "               .::::. -*#     :+                   *     .##:.  -::                   "
                   "             .:.  .=::+*#     ..                   :     -##=   . ...                 "
                   "                 .:.  -*#:                               =#= -.-.                     "
                   "                     -  #=                               **: .                        "
                   "                        :*                              .* .-.                        "
                   "                       .::=                             =::   .                       "
                   "                        .--:                           .-.                            "
                   "                           -                          .- .                            "
                   "                            --.                     .:..                              "
                   "                              ..                   ..                                 "))
         (longest-line (apply #'max (mapcar #'length banner))))
    (put-text-property
     (point)
     (dolist (line banner (point))
       (insert (+doom-dashboard--center
                +doom-dashboard--width
                (concat line (make-string (max 0 (- longest-line (length line))) 32)))
               "\n"))
     'face 'doom-dashboard-banner)))

(setq +doom-dashboard-ascii-banner-fn #'dashboard-ascii)
#+end_src

* DOOM Theme
There are two ways to load a theme. Both assume the theme is installed and available. You can either set =doom-theme= or manually load a theme with the =load-theme= function.
To try out new themes, there is a keybinding for M-x load-theme with =SPC h t=.

#+begin_src emacs-lisp :tangle yes
(setq doom-theme 'doom-dracula)
(map! :leader
      :desc "Load new theme" "t t" #'load-theme)
#+end_src

* Editing
#+begin_src emacs-lisp :tangle yes
(setq-default indent-tabs-mode nil)
(setq-default tab-width 8)
(setq indent-line-function 'insert-tab)
#+end_src
* Fonts
Doom exposes five (optional) variables for controlling fonts in Doom:
+ =doom-font= -- the primary font to use
+ =doom-variable-pitch-font= -- a non-monospace font (where applicable)
+ =doom-big-font= -- used for =doom-big-font-mode=; use this for presentations or streaming.
+ =doom-unicode-font= -- for unicode glyphs
+ =doom-serif-font= -- for the =fixed-pitch-serif= face

See =C-h v doom-font= for documentation and more examples of what they accept.

#+begin_src emacs-lisp :tangle no
(setq doom-font (font-spec :family "Firacode Nerd Font Mono" :size 12 :height 1.0)
      doom-variable-pitch-font (font-spec :family "Firacode Nerd Font Mono" :height 1.3)
      doom-big-font (font-spec :family "Firacode Nerd Font Mono" :size 24)
      doom-unicode-font (font-spec :family "FiraCode Nerd Font Mono" :size 11))
#+end_src

Set Custom faces for fonts
#+begin_src emacs-lisp :tangle yes
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))

(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src
#

If you or Emacs can't find your font, use =M-x describe-font= to look them up, =M-x eval-region= to execute elisp code, and =M-x doom/reload-font= to refresh your font settings.
If Emacs still can't find your font, it likely wasn't installed correctly. Font issues are rarely Doom issues!

* Identification
Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets.

#+begin_src emacs-lisp :tangle yes
(setq user-full-name "Jonas Schwind"
      user-mail-address "jonasschwind20021@gmx.de")
#+end_src

* Line Settings

| COMMAND                  | DESCRIPTION                               | KEYBINDING  |
|--------------------------+-------------------------------------------+-------------|
| comment-line             | /Comment or uncomment lines/                | SPC TAB TAB |
| hl-line-mode             | /Toggle line highlighting in current frame/ | SPC t h     |
| global-hl-line-mode      | /Toggle line highlighting globally/         | SPC t H     |
| doom/toggle-line-numbers | /Toggle line numbers/                       | SPC t l     |
| toggle-truncate-lines    | /Toggle truncate lines/                     | SPC t t     |

#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type t)
(map! :leader
      :desc "Comment or uncomment lines"      "TAB TAB" #'comment-line
      (:prefix ("t" . "toggle")
       :desc "Toggle line numbers"            "l" #'doom/toggle-line-numbers
       :desc "Toggle line highlight in frame" "h" #'hl-line-mode
       :desc "Toggle line highlight globally" "H" #'global-hl-line-mode
       :desc "Toggle truncate lines"          "t" #'toggle-truncate-lines))
#+END_SRC

This determines the style of line numbers in effect.
If set to =nil=, line numbers are disabled. For relative line numbers, set this to =relative=.

#+begin_src emacs-lisp :tangle yes
(setq display-line-numbers-type 'relative)
#+end_src

Automaticaly wrap lengthy lines.

#+begin_src emacs-lisp :tangle yes
(+global-word-wrap-mode +1)
#+end_src

* Markdown
#+begin_src emacs-lisp :tangle yes
(custom-set-faces
 '(markdown-header-face ((t (:inherit font-lock-function-name-face :weight bold :family "variable-pitch"))))
 '(markdown-header-face-1 ((t (:inherit markdown-header-face :height 1.7))))
 '(markdown-header-face-2 ((t (:inherit markdown-header-face :height 1.6))))
 '(markdown-header-face-3 ((t (:inherit markdown-header-face :height 1.5))))
 '(markdown-header-face-4 ((t (:inherit markdown-header-face :height 1.4))))
 '(markdown-header-face-5 ((t (:inherit markdown-header-face :height 1.3))))
 '(markdown-header-face-6 ((t (:inherit markdown-header-face :height 1.2)))))
#+end_src emacs-lisp

* Minimap
#+begin_src emacs-lisp :tangle yes
(setq minimap-window-location 'right)
(map! :leader
      (:prefix ("t" . "toggle")
       :desc "Toggle minimap-mode" "m" #'minimap-mode))
#+end_src emacs-lisp

* Modeline
The modeline is the bottom status bar that appears in Emacs windows.  For more information on what is available to configure in the Doom modeline, check out:
https://github.com/seagle0128/doom-modeline

#+begin_src emacs-lisp
;;(set-face-attribute 'mode-line nil :font "Ubuntu Mono-13")
(setq doom-modeline-height 30     ;; sets modeline height
      doom-modeline-bar-width 5   ;; sets right bar width
      doom-modeline-persp-name t  ;; adds perspective name to modeline
      doom-modeline-persp-icon t) ;; adds folder icon next to persp name
#+end_src

* Org-Mode
If you use =org= and don't want your org files in the default location below, change =org-directory=.
It must be set before org loads!

#+begin_src emacs-lisp :tangle yes
(map! :leader :desc "Org babel tangle" "m B" #'org-babel-tangle)
(after! org
  (setq org-directory "~/Documents/org/"
        org-roam-directory "~/Documents/org/roam/"
        org-hide-emphasis-markers t
        org-ellipsis " ▼ "
        org-superstar-headline-bullets-list '("◉" "●" "○" "◆" "●" "○" "◆")
        org-superstar-itembullet-alist '((?+ . ?➤) (?- . ?✦)) ; changes +/- symbols in item lists
        org-log-done 'time
        org-src-fontify-natively t
        org-src-tab-acts-natively t))
#+end_src

** Org Fonts
Set mixed pitch font for =org-mode= buffers

#+begin_src emacs-lisp :tangle yes
(custom-set-faces
  '(org-level-1 ((t (:inherit outline-1 :height 1.8))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.7))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.6))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.5))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.4))))
  '(org-level-6 ((t (:inherit outline-5 :height 1.3))))
  '(org-level-7 ((t (:inherit outline-5 :height 1.2))))
  '(org-level-8 ((t (:inherit outline-5 :height 1.1)))))
#+end_src

** Org Agenda
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-agenda-files '("~/Documents/org/agenda.org"))
  (setq
   org-fancy-priorities-list '("🟥" "🟧" "🟨")
   org-priority-faces
   '((?A :weight bold)
     (?B :weight bold)
     (?C :weight bold))
   org-agenda-block-separator 8411)

  (setq org-agenda-custom-commands
        '(("v" "A better agenda view"
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority unfinished tasks:")))
            (tags "PRIORITY=\"B\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "Medium-priority unfinished tasks:")))
            (tags "PRIORITY=\"C\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Low-priority unfinished tasks:")))
            (tags "customtag"
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Tasks marked with customtag:")))
            (agenda "")
            (alltodo ""))))))
#+end_src

** Org auto-tangle
=org-auto-tangle= allows you to automatically tangle when you save the document. Add the option =#+auto_tangle: t= in your Org file.

#+begin_src emacs-lisp :tangle yes
(use-package org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config (setq org-auto-tangle-default t))
#+end_src

** Org-Roam

#+begin_src emacs-lisp :tangle yes
(use-package! org-roam
  :defer t
  :config (setq org-roam-capture-templates
        '(("m" "main" plain
           "%?"
           :if-new (file+head "main/${slug}.org" "#+title: ${title}\n")
        :immediate-finish t
           :unarrowed t)
          ("r" "reference" plain
           "%?"
           :if-new (file+head "reference/${slug}.org" "#+title: ${title}\n")
           :immediate-finish t
           :unarrowed t)
          ("a" "article" plain
           "%?"
           :if-new (file+head "article/${slug}.org" "#+title: ${title}\n")
           :immediate-finish t
           :unarrowed t)))

        (cl-defmethod org-roam-node-type ((node org-roam-node))
          "Return node-type"
          (condition-case nil
              (file-name-nondirectory
               (directory-file-name
                (file-name-directory
                 (file-relative-name (org-roam-node-file node) org-roam-directory))))
          (error "")))

        (setq org-roam-node-display-template (concat "${type:15} ${title:*} " (propertize "${tags:10}" 'face 'org-tag))))

(map! :leader
      (:prefix ("n r" . "org-roam")
               :desc "Toggle roam-buffer"       "r" #'org-roam-buffer-toggle
               :desc "Find Node"                "f" #'org-roam-node-find
               :desc "Insert Node"              "i" #'org-roam-node-insert
               :desc "Show Graph"               "g" #'org-roam-graph
               :desc "Capture to Node"          "c" #'org-roam-capture
               :desc "Capture Dailies"          "j" #'org-roam-dailies-capture-today))
#+end_src

** Org-Roam-UI
#+begin_src emacs-lisp :tangle yes
(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam
  :init (when (featurep 'xwidget-internal)
          (setq org-roam-ui-browser-function #'xwidget-webkit-browse-url))
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+end_src

** Org-AI
#+begin_src emacs-lisp :tangle yes
(use-package! org-ai
    :ensure t
    :commands (org-ai-modeorg-ai-global-mode)
    :init
    (add-hook 'org-mode-hook #'org-ai-mode)
    (org-ai-global-mode +1)
    :config
    (setq org-ai-openai-api-token "")
    (org-ai-install-yasnippets))
#+end_src emacs-lisp

* Rainbow Mode
Rainbow mode displays the actual color for any hex value color, regardless of what mode I am in.
The following creates a global minor mode for rainbow-mode and enables it.

#+begin_src emacs-lisp :tangle yes
(define-globalized-minor-mode global-rainbow-mode rainbow-mode
  (lambda ()
    (when (not (memq major-mode
                (list 'org-agenda-mode)))
     (rainbow-mode 1))))
(global-rainbow-mode 1 )
#+end_src

* Shells
Settings for the various shells and terminal emulators within Emacs.

| COMMAND             | DESCRIPTION                | KEYBINDING |
|---------------------+----------------------------+------------|
| eshell              | /Launch the eshell/          | SPC e s    |
| +eshell/toggle      | /Toggle eshell popup window/ | SPC e t    |
| counsel-esh-history | /Browse the eshell history/  | SPC e h    |
| +vterm/toggle       | /Toggle vterm popup window/  | SPC v t    |

#+begin_src emacs-lisp :tangle yes
(setq shell-file-name "/bin/sh"
      vterm-max-scrollback 5000)
(setq eshell-rc-script "~/.config/doom/eshell/profile"
      eshell-aliases-file "~/.config/doom/eshell/aliases"
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands'("bash" "htop" "ssh" "top" "zsh"))
(map! :leader
      :desc "Eshell"                 "e s" #'eshell
      :desc "Eshell popup toggle"    "e t" #'+eshell/toggle
      :desc "Counsel eshell history" "e h" #'counsel-esh-history
      :desc "Vterm popup toggle"     "v t" #'+vterm/toggle)
#+END_SRC

* Winner Mode
Winner mode has been included with GNU Emacs since version 20.  This is a global minor mode and, when activated, it allows you to “undo” (and “redo”) changes in the window configuration with the key commands 'SCP w <left>' and 'SPC w <right>'.

#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix ("w" . "window")
       :desc "Winner redo" "<right>" #'winner-redo
       :desc "Winner undo" "<left>"  #'winner-undo))
#+END_SRC
* Whitespace-mode
#+begin_src emacs-lisp :tangle yes
(use-package! whitespace
  :config
  (setq
    global-whitespace-mode +1
    whitespace-style '(face tabs tab-mark spaces space-mark trailing lines-tail newline newline-mark)
    whitespace-display-mappings '(
      (space-mark   ?\     [?\u00B7]     [?.])
      (space-mark   ?\xA0  [?\u00A4]     [?_])
      (newline-mark ?\n    [?¬ ?\n])
      (tab-mark     ?\t    [?\u00BB ?\t] [?\\ ?\t]))))
#+end_src emacs-lisp
